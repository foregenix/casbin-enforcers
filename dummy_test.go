package casbin_enforcers

import "testing"

func TestDummy(t *testing.T) {
	d := &DummyEnforcer{}
	var sa []string
	var saa [][]string
	var ok bool
	err := ErrorUnsupported
	checkReturns := func() {
		if sa != nil || saa != nil || ok {
			t.Fatal("One or more return values not nil for dummy class")
		}
		if err != ErrorUnsupported {
			t.Fatal("Unexpected error condition returned")
		}
	}
	sa, err = d.GetRolesForUser("")
	checkReturns()
	sa, err = d.GetUsersForRole("")
	checkReturns()
	ok, err = d.HasRoleForUser("", "")
	checkReturns()
	ok, err = d.AddRoleForUser("", "")
	checkReturns()
	ok, err = d.DeleteRoleForUser("", "")
	checkReturns()
	ok, err = d.DeleteRolesForUser("")
	checkReturns()
	ok, err = d.DeleteUser("")
	checkReturns()
	ok, err = d.DeleteRole("")
	checkReturns()
	ok, err = d.DeletePermission("")
	checkReturns()
	ok, err = d.AddPermissionForUser("", "")
	checkReturns()
	ok, err = d.DeletePermissionForUser("", "")
	checkReturns()
	ok, err = d.DeletePermissionsForUser("")
	checkReturns()
	saa = d.GetPermissionsForUser("")
	checkReturns()
	ok = d.HasPermissionForUser("", "")
	checkReturns()
	sa, err = d.GetImplicitRolesForUser("", "")
	checkReturns()
	saa, err = d.GetImplicitPermissionsForUser("", "")
	checkReturns()
	sa, err = d.GetImplicitUsersForPermission("")
	checkReturns()
	sa = d.GetUsersForRoleInDomain("", "")
	checkReturns()
	sa = d.GetRolesForUserInDomain("", "")
	checkReturns()
	saa = d.GetPermissionsForUserInDomain("", "")
	checkReturns()
	ok, err = d.AddRoleForUserInDomain("", "", "")
	checkReturns()
	ok, err = d.DeleteRoleForUserInDomain("", "", "")
	checkReturns()
	sa = d.GetAllSubjects()
	checkReturns()
	sa = d.GetAllNamedSubjects("")
	checkReturns()
	sa = d.GetAllObjects()
	checkReturns()
	sa = d.GetAllNamedObjects("")
	checkReturns()
	sa = d.GetAllActions()
	checkReturns()
	sa = d.GetAllNamedActions("")
	checkReturns()
	sa = d.GetAllRoles()
	checkReturns()
	sa = d.GetAllNamedRoles("")
	checkReturns()
	saa = d.GetPolicy()
	checkReturns()
	saa = d.GetFilteredPolicy(0, "")
	checkReturns()
	saa = d.GetNamedPolicy("")
	checkReturns()
	saa = d.GetFilteredNamedPolicy("", 0, "")
	checkReturns()
	saa = d.GetGroupingPolicy()
	checkReturns()
	saa = d.GetFilteredGroupingPolicy(0, "")
	checkReturns()
	saa = d.GetNamedGroupingPolicy("")
	checkReturns()
	saa = d.GetFilteredNamedGroupingPolicy("", 0, "")
	checkReturns()
	ok = d.HasPolicy("")
	checkReturns()
	ok = d.HasNamedPolicy("", "")
	checkReturns()
	ok, err = d.AddPolicy("")
	checkReturns()
	ok, err = d.AddNamedPolicy("", "")
	checkReturns()
	ok, err = d.RemovePolicy("")
	checkReturns()
	ok, err = d.RemoveFilteredPolicy(0, "")
	checkReturns()
	ok, err = d.RemoveNamedPolicy("", "")
	checkReturns()
	ok, err = d.RemoveFilteredNamedPolicy("", 0, "")
	checkReturns()
	ok = d.HasGroupingPolicy("")
	checkReturns()
	ok = d.HasNamedGroupingPolicy("", "")
	checkReturns()
	ok, err = d.AddGroupingPolicy("")
	checkReturns()
	ok, err = d.AddNamedGroupingPolicy("", "")
	checkReturns()
	ok, err = d.RemoveGroupingPolicy("")
	checkReturns()
	ok, err = d.RemoveFilteredGroupingPolicy(0, "")
	checkReturns()
	ok, err = d.RemoveNamedGroupingPolicy("", "")
	checkReturns()
	ok, err = d.RemoveFilteredNamedGroupingPolicy("", 0, "")
	checkReturns()
	d.AddFunction("", nil)

}
